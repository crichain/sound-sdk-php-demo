<?php
/**
 * @file
 * This is a file generated by scripts/generate-complex-datatypes.php.
 *
 * DO NOT EDIT THIS FILE.
 *
 * @ingroup generated
 * @ingroup dataTypesComplex
 */
namespace Ethereum\DataType;

/**
 * Ethereum data type FilterChange.
 * 
 * Generated by scripts/generate-complex-datatypes.php based on resources/ethjs-schema.json.
 */
class FilterChange extends EthDataType {

	/**
	 * Value for 'removed'.
	 */
	public $removed;

	/**
	 * Value for 'logIndex'.
	 */
	public $logIndex;

	/**
	 * Value for 'transactionIndex'.
	 */
	public $transactionIndex;

	/**
	 * Value for 'transactionHash'.
	 */
	public $transactionHash;

	/**
	 * Value for 'blockHash'.
	 */
	public $blockHash;

	/**
	 * Value for 'blockNumber'.
	 */
	public $blockNumber;

	/**
	 * Value for 'address'.
	 */
	public $address;

	/**
	 * Value for 'data'.
	 */
	public $data;

	/**
	 * Value for 'topics'.
	 */
	public $topics;

	/**
	 * @param EthB $removed
	 * @param EthQ $logIndex
	 * @param EthQ $transactionIndex
	 * @param EthD32 $transactionHash
	 * @param EthD32 $blockHash
	 * @param EthQ $blockNumber
	 * @param EthD20 $address
	 * @param EthBytes $data
	 * @param array $topics Array of EthD32
	 */
	public function __construct(EthB $removed = null, EthQ $logIndex = null, EthQ $transactionIndex = null, EthD32 $transactionHash = null, EthD32 $blockHash = null, EthQ $blockNumber = null, EthD20 $address = null, EthBytes $data = null, array $topics = null) {
		$this->removed = $removed;  
		$this->logIndex = $logIndex;  
		$this->transactionIndex = $transactionIndex;  
		$this->transactionHash = $transactionHash;  
		$this->blockHash = $blockHash;  
		$this->blockNumber = $blockNumber;  
		$this->address = $address;  
		$this->data = $data;  
		$this->topics = $topics;
	}

	/**
	 * Returns a name => type array.
	 */
	public static function getTypeArray() {
		return array( 
			'removed' => 'EthB',
			'logIndex' => 'EthQ',
			'transactionIndex' => 'EthQ',
			'transactionHash' => 'EthD32',
			'blockHash' => 'EthD32',
			'blockNumber' => 'EthQ',
			'address' => 'EthD20',
			'data' => 'EthBytes',
			'topics' => '[EthD32]',
		);
	}

	/**
	 * Returns array with values.
	 */
	public function toArray() {
		$return = [];
		(!is_null($this->removed)) ? $return['removed'] = $this->removed->hexVal() : NULL; 
		(!is_null($this->logIndex)) ? $return['logIndex'] = $this->logIndex->hexVal() : NULL; 
		(!is_null($this->transactionIndex)) ? $return['transactionIndex'] = $this->transactionIndex->hexVal() : NULL; 
		(!is_null($this->transactionHash)) ? $return['transactionHash'] = $this->transactionHash->hexVal() : NULL; 
		(!is_null($this->blockHash)) ? $return['blockHash'] = $this->blockHash->hexVal() : NULL; 
		(!is_null($this->blockNumber)) ? $return['blockNumber'] = $this->blockNumber->hexVal() : NULL; 
		(!is_null($this->address)) ? $return['address'] = $this->address->hexVal() : NULL; 
		(!is_null($this->data)) ? $return['data'] = $this->data->hexVal() : NULL; 
		(!is_null($this->topics)) ? $return['topics'] = Ethereum::valueArray($this->topics, 'EthD32') : array(); 
		return $return;
	}
}